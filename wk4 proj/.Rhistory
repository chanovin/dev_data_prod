## lets do some quick diagnostics
par(mfrow=c(2,3))
plot(cylwtfit,which=1)
plot(cylwtfit,which=2)
plot(cylwtfit,which=3)
plot(cylwtfit,which=4)
plot(cylwtfit,which=5)
plot(cylwtfit,which=6)
plot(cylwtfit$residuals~corrcars$mpg)
plot(cylwtfit$residuals~corrcars$disp)
plot(cylwtfit$residuals~corrcars$hp)
plot(cylwtfit$residuals~corrcars$drat)
plot(cylwtfit$residuals~corrcars$qsec)
plot(cylwtfit$residuals~corrcars$gears)
plot(cylwtfit$residuals~corrcars$gear)
plot(cylwtfit$residuals~corrcars$carb)
par(mfrow=c(2,4))
plot(cylwtfit$residuals~corrcars$am)
plot(cylwtfit$residuals~corrcars$mpg)
plot(cylwtfit$residuals~corrcars$disp)
plot(cylwtfit$residuals~corrcars$hp)
plot(cylwtfit$residuals~corrcars$drat)
plot(cylwtfit$residuals~corrcars$qsec)
plot(cylwtfit$residuals~corrcars$gears)
plot(cylwtfit$residuals~corrcars$gear)
plot(cylwtfit$residuals~corrcars$carb)
str(corrcars)
ggplot(corrcars, aes(x=am, y=mpg)) + geom_boxplot()
ggplot(corrcars, aes(x=am, y=mpg)) + geom_boxplot() + ggtitle("MPG by transmission")
explbox <- ggplot(corrcars, aes(x=am, y=mpg)) + geom_boxplot() + ggtitle("MPG by transmission")
explpr <- pairs(corrcars)
multiplot(explbox,explpr,cols=2)
library(ggplot2)
explbox <- ggplot(corrcars, aes(x=am, y=mpg)) + geom_boxplot() + ggtitle("MPG by transmission")
explpr <- pairs(corrcars)
multiplot(explbox,explpr,cols=2)
library(grid)
explbox <- ggplot(corrcars, aes(x=am, y=mpg)) + geom_boxplot() + ggtitle("MPG by transmission")
explpr <- pairs(corrcars)
multiplot(explbox,explpr,cols=2)
?multiplot
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
# Code from Winston Chang, www.cookbook-r.com
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
explbox <- ggplot(corrcars, aes(x=am, y=mpg)) + geom_boxplot() + ggtitle("MPG by transmission")
explpr <- pairs(corrcars)
multiplot(explbox,explpr,cols=2)
t.test(mpg~am,data=corrcars)
summary(aov(mpg~.,data=corrcars))
bestfit <- lm(mpg~cyl+wt+disp,data=corrcars)
bestfitplus <- lm(mpg~cyl+wt+disp+am,data=corrcars)
anova(bestfit,bestfitplus)
summary(cylwtamfit)
anova(cylwtfit,cylwtamfit)
par(mfrow=c(2,3))
plot(cylwtfit,which=1)
plot(cylwtfit,which=2)
plot(cylwtfit,which=3)
plot(cylwtfit,which=4)
plot(cylwtfit,which=5)
plot(cylwtfit,which=6)
par(mfrow=c(2,4))
plot(cylwtfit$residuals~corrcars$am)
plot(cylwtfit$residuals~corrcars$mpg)
plot(cylwtfit$residuals~corrcars$disp)
plot(cylwtfit$residuals~corrcars$hp)
plot(cylwtfit$residuals~corrcars$drat)
plot(cylwtfit$residuals~corrcars$qsec)
plot(cylwtfit$residuals~corrcars$gear)
plot(cylwtfit$residuals~corrcars$carb)
pairs(corrcars)
cylwtamfit$coefficients
cylwtamfit$fitted.values
cylwtamfit$residuals
cylwtamfit$effects
cylwtamfit$rank
cylwtamfit$assign
cylwtamfit$df.residual
cylwtamfit$terms
?latex_engine
knitr::opts_chunk$set(echo = FALSE)
library(rgdal)
library(leaflet)
download.file("http://www2.census.gov/geo/tiger/GENZ2010/gz_2010_us_040_00_500k.zip",
destfile="2010-census-500k.zip")
unzip("2010-census-500k.zip")
# Read the file with rgdal
states <- readOGR( dsn= getwd() , layer="gz_2010_us_040_00_500k")
# Read population change data 2000-2010 from web
popchg <- read.csv(url("https://www.census.gov/2010census/csv/pop_change.csv"), skip=2)
# Rename the index variable
names(popchg[1]) <- "NAME"
# Merge the data
popshp <- merge(states,popchg,by="NAME")
# Set colors
colpal <- colorNumeric(palette="YlOrRd", domain=popshp$X2010_CHANGE)
# Set labels
labels <- sprintf(paste("<strong>",popshp$NAME,"</strong><br/><b>2010 Pop:</b>&ensp;",popshp$X2010_POPULATION,"<br/><b>Change from 2000:</b>&emsp;",
popshp$X2010_CHANGE,"%%", sep="")) %>%
lapply(htmltools::HTML)
map2010 <- leaflet(popshp) %>%
setView(-92, 34, 3.85) %>%
addTiles() %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, fillColor = colpal(popshp$X2010_CHANGE),
highlight = highlightOptions(weight = 5, color = "#666", dashArray = "",
fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px", direction = "auto")
) %>%
addLegend("bottomright", pal=colpal, values=popshp$X2010_CHANGE, title="2000-2010 Pop. Change (%)",
opacity=1)
map2010
str(popchg)
download.file("http://www2.census.gov/geo/tiger/GENZ2010/gz_2010_us_040_00_500k.zip",
destfile="2010-census-500k.zip")
unzip("2010-census-500k.zip")
# Read the file with rgdal
states <- readOGR( dsn= getwd() , layer="gz_2010_us_040_00_500k")
# Read population change data 2000-2010 from web
popchg <- read.csv(url("https://www.census.gov/2010census/csv/pop_change.csv"), skip=2)
# Rename the index variable
names(popchg)[1] <- "NAME"
# Merge the data
popshp <- merge(states,popchg,by="NAME")
# Set colors
colpal <- colorNumeric(palette="YlOrRd", domain=popshp$X2010_CHANGE)
# Set labels
labels <- sprintf(paste("<strong>",popshp$NAME,"</strong><br/><b>2010 Pop:</b>&ensp;",popshp$X2010_POPULATION,"<br/><b>Change from 2000:</b>&emsp;",
popshp$X2010_CHANGE,"%%", sep="")) %>%
lapply(htmltools::HTML)
map2010 <- leaflet(popshp) %>%
setView(-92, 34, 3.85) %>%
addTiles() %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, fillColor = colpal(popshp$X2010_CHANGE),
highlight = highlightOptions(weight = 5, color = "#666", dashArray = "",
fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px", direction = "auto")
) %>%
addLegend("bottomright", pal=colpal, values=popshp$X2010_CHANGE, title="2000-2010 Pop. Change (%)",
opacity=1)
map2010
?colsums
?colSums
?dgamma
?show
?predict
?stats
library()
?lm
?mean
install.packages("methods")
install.packages("methods")
install.packages("methods")
install.packages("methods")
install.packages("methods")
install.packages("methods")
?methods
library(methods)
?getMethod
install.packages("DDPQuiz3")
?mean
?lm
?predict
library(plotly)
library(datasets)
iris
str(iris)
plot_ly(iris, Sepal.Length, Petal.Length, color=Species)
plot_ly(iris, x=Sepal.Length, y=Petal.Length, color=Species)
plot_ly(iris, x = Sepal.Length, y = Petal.Length, mode="markers", color=Species)
plot_ly(iris, x = iris$Sepal.Length, y = iris$Petal.Length, mode = "markers", color = iris$Species)
plot_ly(iris, x = ~Sepal.Length, y = ~Petal.Length, mode = "markers", color = ~Species)
?plot_ly
plot_ly(iris, x = ~Sepal.Length, y = ~Petal.Length, mode = "markers", color = ~Species, type="scatter")
?plot_ly
plot_ly(iris, x = ~Sepal.Length, y = ~Petal.Length, mode = "markers", symbol = ~Species, type="scatter")
plot_ly(iris, x = ~Sepal.Length, y = ~Petal.Length, mode = "markers", symbol = ~Species, color = Sepal.Length~Petal.Length, type="scatter")
plot_ly(iris, x = ~Sepal.Length, y = ~Petal.Length, mode = "markers", symbol = ~Species, color = ~Sepal.Length/Petal.Length, type="scatter")
plot_ly(iris, x = ~Sepal.Length, y = ~Petal.Length, mode = "markers", symbol = ~Species, color = ~Sepal.Length+Petal.Length, type="scatter")
plot_ly(iris, x = ~Sepal.Length, y = ~Petal.Length, mode = "markers", symbol = ~Species, color = ~Sepal.Length/Sepal.Width, type="scatter")
plot_ly(iris, x = ~Sepal.Length, y = ~Petal.Length, mode = "markers", symbol = ~Species, color = Sepal.Length~Sepal.Width, type="scatter")
plot_ly(iris, x = ~Species, y = ~Petal.Length, mode = "markers", color = ~Sepal.Length/Sepal.Width, type="scatter")
plot_ly(iris, x = ~Species, y = ~Petal.Length, color = ~Sepal.Length/Sepal.Width, type="scatter")
plot_ly(iris, x = ~Sepal.Length, y = ~Petal.Length, mode = "markers", symbol = ~Species, color = Sepal.Length~Sepal.Width, type="scatter")
?datasets
library(help="datasets")
presidents
cars
str(cars)
str(UCBAdmissions)
str(HairEyeColor)
str(CO2)
str(LifeCycleSavings)
head(LifeCycleSavings)
?LifeCycleSavings
plot_ly(LifeCycleSavings, x= ~dpi, y= ~sr)
plot_ly(LifeCycleSavings, x= ~dpi, y= ~sr, mode="markers", color=~pop75)
plot_ly(LifeCycleSavings, x= ~dpi, y= ~sr, mode="markers", color=~pop75, type = "scatter")
plot_ly(LifeCycleSavings, x= ~dpi, y= ~sr, z=~pop75/pop15, type = "surface")
plot_ly(LifeCycleSavings, x= ~dpi, y= ~sr, z=~pop75/pop15, type = "scatter")
plot_ly(LifeCycleSavings, x= ~dpi, y= ~sr, color=~pop75/pop15, type = "scatter", mode="marker")
plot_ly(LifeCycleSavings, x= ~dpi, y= ~sr, color=~pop75/pop15, type = "scatter", mode="markers")
plot_ly(LifeCycleSavings, x= ~dpi, y= ~sr, color=~pop75-pop15, type = "scatter", mode="markers")
str(LifeCycleSavings)
head(LifeCycleSavings)
plot_ly(LifeCycleSavings, x= ~dpi, y= ~sr, z= ~ddpi, color=~pop75-pop15, type = "scatter", mode="markers")
plot_ly(LifeCycleSavings, x= ~dpi, y= ~sr, z= ~ddpi, color=~pop75-pop15, type = "scatter3d", mode="markers")
knitr::opts_chunk$set(echo = FALSE)
library(plotly)
library(datasets)
lcs = LifeCycleSavings
lcs$agebalance = lcs$pop75-lcs$pop15
xlab <- list(title="per-capita disposable income")
ylab <- list(title="savings (% of disposable income)")
plot_ly(lcs, x= ~dpi, y= ~sr, color=~agebalance, type = "scatter", mode="markers") %>%
layout(xaxis=xlab, yaxis=ylab)
plot_ly(lcs, x= ~dpi, y= ~sr, color=~agebalance, type = "scatter", mode="markers") %>%
layout(xaxis=xlab, yaxis=ylab)
setwd("~/GitHub/dev_data_prod/wk4 proj")
abalone <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"))
str(abalone)
?read.csv
abalone <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"),header=FALSE)
str(abalone)
names(abalone)
names(abalone) <- c("sex","length","diameter","height","whole_wt","shuck_wt","visc_wt","shell_wt","rings")
str(abalone)
abalone$age <- abalone$rings + 1.5
?lm
fit1 <- lm(age ~ length + diameter + height + whole_wt, data=abalone)
pred1 <- predict(fit1, abalone)
table(pred1,abalone$age)
fit1 <- lm(rings ~ length + diameter + height + whole_wt, data=abalone)
?round
abalone <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"),
header=FALSE)
names(abalone) <- c("sex","length","diameter","height","whole_wt","shuck_wt","visc_wt","shell_wt","rings")
fit1 <- lm(rings ~ length + diameter + height + whole_wt, data=abalone)
pred1 <- predict(fit1, abalone)
pred1r <- round(pred1)
table(pred1r, abalone$rings)
abalone <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"),
header=FALSE)
names(abalone) <- c("sex","length","diameter","height","whole_wt","shuck_wt","visc_wt","shell_wt","rings")
fit1 <- lm(rings ~ length + diameter + height + whole_wt, data=abalone)
pred1 <- predict(fit1, abalone)
pred1r <- round(pred1)
table(pred1r, abalone$rings)
fit2 <- train(rings ~ length + diameter + height + whole_wt, data=abalone, method="rf")
pred2 <- predict(fit2, abalone)
pred2r <- round(pred2)
table(pred2r, abalone$rings)
library(caret)
library(caret)
abalone <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"),
header=FALSE)
names(abalone) <- c("sex","length","diameter","height","whole_wt","shuck_wt","visc_wt","shell_wt","rings")
fit1 <- lm(rings ~ length + diameter + height + whole_wt, data=abalone)
pred1 <- predict(fit1, abalone)
pred1r <- round(pred1)
table(pred1r, abalone$rings)
fit2 <- train(rings ~ length + diameter + height + whole_wt, data=abalone, method="rf")
library(caret)
abalone <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"),
header=FALSE)
names(abalone) <- c("sex","length","diameter","height","whole_wt","shuck_wt","visc_wt","shell_wt","rings")
fit1 <- lm(rings ~ length + diameter + height + whole_wt, data=abalone)
pred1 <- predict(fit1, abalone)
pred1r <- round(pred1)
table(pred1r, abalone$rings)
fit2 <- train(rings ~ length + diameter + height + whole_wt, data=abalone, method="gbm")
pred2 <- predict(fit2, abalone)
pred2r <- round(pred2)
table(pred2r, abalone$rings)
confusionMatrix(pred2r, abalone$rings)
acc2r = pred2r - abalone$rings
summary(acc2r)
plot(acc2r)
hist(acc2r)
hist(acc2r,bin=1)
?hist
hist(acc2r,bin=1)
hist(acc2r)
hist(acc2r)
boxplot(acc2r)
acc1r = pred1r - abalone$rings
boxplot(acc2r, acc1r)
fit3 <- train(rings ~ length + diameter + height + whole_wt, data=abalone, method="lda")
pred3 <- predict(fit3, abalone)
pred3r <- round(pred3)
fit3 <- train(rings ~ length + diameter + height + whole_wt, data=abalone, method="lpcr")
pred3 <- predict(fit3, abalone)
pred3r <- round(pred3)
fit3 <- train(rings ~ length + diameter + height + whole_wt, data=abalone, method="pcr")
fit3 <- train(rings ~ length + diameter + height + whole_wt, data=abalone, method="pcr")
pred3 <- predict(fit3, abalone)
pred3r <- round(pred3)
acc3r <- pred3r - abalone$rings
boxplot(acc1r, acc2r, acc3r)
fit3 <- train(rings ~ length + diameter + height + whole_wt, data=abalone, method="relaxo")
fit3 <- train(rings ~ length + diameter + height + whole_wt, data=abalone, method="relaxo")
pred3 <- predict(fit3, abalone)
pred3r <- round(pred3)
fit3 <- train(rings ~ length + diameter + height + whole_wt, data=abalone, method="treeba")
pred3 <- predict(fit3, abalone)
pred3r <- round(pred3)
fit3 <- train(rings ~ length + diameter + height + whole_wt, data=abalone, method="treebag")
fit3 <- train(rings ~ length + diameter + height + whole_wt, data=abalone, method="treebag")
pred3 <- predict(fit3, abalone)
pred3r <- round(pred3)
acc3r <- pred3r - abalone$rings
boxplot(acc1r, acc2r, acc3r)
boxplot(acc2r)
hist(acc2r)
mean(acc2r)/(sd(acc2r)/sqrt(len(acc2r)))
mean(acc2r)/(sd(acc2r)/sqrt(length(acc2r)))
2*pt(-abs(-1.324602), df=length(acc2r)-1)
summary(aov(rings~length+diameter+height+whole_wt,data=abalone))
summary(aov(rings~length+diameter+height,data=abalone))
library(caret)
abalone <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"),
header=FALSE)
names(abalone) <- c("sex","length","diameter","height","whole_wt","shuck_wt","visc_wt","shell_wt","rings")
fit1 <- lm(rings ~ length + diameter + height, data=abalone)
pred1 <- predict(fit1, abalone)
pred1r <- round(pred1)
acc1r <- pred1r - abalone$rings
table(pred1r, abalone$rings)
fit2 <- train(rings ~ length + diameter + height, data=abalone, method="gbm")
pred2 <- predict(fit2, abalone)
pred2r <- round(pred2)
acc2r <- pred2r - abalone$rings
table(pred2r, abalone$rings)
fit3 <- train(rings ~ length + diameter + height, data=abalone, method="treebag")
pred3 <- predict(fit3, abalone)
pred3r <- round(pred3)
acc3r <- pred3r - abalone$rings
confusionMatrix(pred1r, abalone$rings)
confusionMatrix(pred2r, abalone$rings)
boxplot(acc1r,acc2r,acc3r)
table(acc2r)
table(acc3r)
summary(acc1r)
summary(acc2r)
summary(acc3r)
combofit <- (abalone$rings ~ pred1 + pred2 + pred3, method="lm")
combofit <- train(abalone$rings ~ pred1 + pred2 + pred3, method="lm")
table(pred2r, abalone$rings)
table(pred2r, pred3r)
library(caret)
abalone <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"),
header=FALSE)
names(abalone) <- c("sex","length","diameter","height","whole_wt","shuck_wt","visc_wt","shell_wt","rings")
abalone$rings <- as.factor(abalone$rings)
fit1 <- lm(rings ~ length + diameter + height, data=abalone)
pred1 <- predict(fit1, abalone)
## pred1r <- round(pred1)
## acc1r <- pred1r - abalone$rings
## table(pred1r, abalone$rings)
fit2 <- train(rings ~ length + diameter + height, data=abalone, method="gbm")
pred2 <- predict(fit2, abalone)
## pred2r <- round(pred2)
## acc2r <- pred2r - abalone$rings
## table(pred2r, abalone$rings)
fit3 <- train(rings ~ length + diameter + height, data=abalone, method="treebag")
pred3 <- predict(fit3, abalone)
## pred3r <- round(pred3)
## acc3r <- pred3r - abalone$rings
## table(pred3r, abalone$rings)
acc1 <- as.numeric(pred1) - as.numeric(abalone$rings)
acc2 <- as.numeric(pred2) - as.numeric(abalone$rings)
acc3 <- as.numeric(pred3) - as.numeric(abalone$rings)
boxplot(acc1,acc2,acc3)
acc1 <- as.numeric(pred1) - as.numeric(abalone$rings)
acc2 <- as.numeric(pred2) - as.numeric(abalone$rings)
acc3 <- as.numeric(pred3) - as.numeric(abalone$rings)
boxplot(acc1,acc2,acc3)
summary(acc3)
table(pred3,abalone$rings)
library(caret)
abalone <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"),
header=FALSE)
names(abalone) <- c("sex","length","diameter","height","whole_wt","shuck_wt","visc_wt","shell_wt","rings")
abalone$rings <- as.factor(abalone$rings)
fit <- train(rings ~ length + diameter + height, data=abalone, method="treebag")
pred <- predict(fit, abalone)
acc <- as.numeric(pred) - as.numeric(abalone$rings)
boxplot(acc)
confusionMatrix(pred,abalone$rings)
summary(abalone)
str(abalone$rings)
1==2
(1:100)/100
test<-c(abalone$diameter[1],abalone$length[1],abalone$height[1])
test
predict(test,fit)
predict(fit,test)
test<-data.frame(abalone$diameter[1],abalone$length[1],abalone$height[1])
predict(fit,test)
predict(test,fit)
str(abalone)
str(predict)
str(test)
shiny::runApp('abalone_predict')
runApp('abalone_predict')
runApp('abalone_predict')
runApp('abalone_predict')
runApp('abalone_predict')
runApp('dummytest')
runApp('abalone_predict')
runApp('abalone_predict')
runApp('abalone_predict')
runApp('abalone_predict')
runApp('abalone_predict')
runApp('abalone_predict')
runApp('abalone_predict')
paste("Abalone with diameter ", 4, " inches,<br/>length ", .12,
" inches,<br/>and height ", .14, " inches is estimated to have ",
a10, " rings and to be ", 11.5, " years old.")
paste("Abalone with diameter ", 4, " inches,<br/>length ", .12,
" inches,<br/>and height ", .14, " inches is estimated to have ",10, " rings and to be ", 11.5, " years old.")
runApp('abalone_predict')
runApp('abalone_predict')
testplot <- ggplot(abalone[1:100,],aes(x=diameter,y=rings)) + geom_point(shape=1)
testplot <- testplot + ggplot(abalone[101,], aes(x=diameter,y=rings)) +geom_point(shape=4, color="red")
runApp('abalone_predict')
runApp('abalone_predict')
runApp('abalone_predict')
runApp('abalone_predict')
?reactiveValues
runApp('abalone_predict')
runApp('abalone_predict')
runApp('abalone_predict')
runApp('abalone_predict')
runApp('abalone_predict')
runApp('abalone_predict')
runApp('abalone_predict')
rsconnect()
library(rsconnect)
rsconnect9)
rsconnect()
rsconnect::setAccountInfo(name='chanovin',
token='712B35C3B48987855C25553C818F2B4E',
secret='<SECRET>')
Sys.setlocale(locale="English")
rsconnect::setAccountInfo(name='chanovin',
token='712B35C3B48987855C25553C818F2B4E',
secret='<SECRET>')
install.packages("rsconnect")
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='chanovin',
token='712B35C3B48987855C25553C818F2B4E',
secret='<SECRET>')
rsconnect::setAccountInfo(name='chanovin',
token='5AB95EEAE485ED16F8FBE12CFCC21957',
secret='<SECRET>')
library(rsconnect)
rsconnect::setAccountInfo(name='chanovin',
token='5AB95EEAE485ED16F8FBE12CFCC21957',
secret='<SECRET>')
setAccountInfo(name="chanovin", token="5AB95EEAE485ED16F8FBE12CFCC21957",
secret="<SECRET>")
rsconnect::setAccountInfo(name='chanovin',
token='712B35C3B48987855C25553C818F2B4E',
secret='0ZsXHFvJSgwuPj2zPjYMQ+rU8b+hqc+xSy78QMZn')
rsconnect::setAccountInfo(name='chanovin',
token='5AB95EEAE485ED16F8FBE12CFCC21957',
secret='P292qyHcFyclgCr9JayRgH8R83vrgt+HvMORNzky')
